
(1) tail
tail -f filename
监视filename文件的尾部内容

tail -n 20 filename
显示filename最后20行(默认10行)

tail *.conf
查看多个文件（显示文件名）


(2) grep
-E		解释PATTERN作为扩展正则表达式，也就相当于使用egrep
-i		搜索时候忽略大小写
-v		反转匹配，选择没有被匹配到的内容
-w		匹配整词，精确地单词,单词的两边必须是非字符符号(即不能是字母数字或下划线)
-L		列出文件内容不符合指定的范本样式的文件名称
-l		列出文件内容符合指定的范本样式的文件名称
-n		输出匹配内容的同时输出其所在行号
-c		抑制正常输出;而是为每个输入文件打印匹配线的计数
-R,-r	以递归方式读取每个目录下的所有文件

-A num	匹配到搜索到的行以及该行下面的num行
-B num	匹配到搜索到的行以及该行上面的num行
-C num	匹配到搜索到的行以及上下各num行

cat filename | grep -i pattern

grep pattern files ...
多文件搜索

grep -i pattern files
不区分大小写搜索（默认情况区分大小写）

grep -l pattern files
列出匹配的文件名

grep -L pattern files
列出不匹配的文件名

grep -E 'pattern1 | pattern2' files
显示匹配 pattern1 或 pattern2 的行
grep pattern1 files | grep pattern2
显示既匹配 pattern1 又匹配 pattern2 的行。

grep 'log' /home/admin -r -n
目录下查找所有符合关键字的文件  
grep 'shopbase' /home/admin -r -n --include *.{vm,java}
指定文件后缀
grep 'shopbase' /home/admin -r -n --exclude *.{vm,java}
反匹配


# seq 10 | grep 5 -A 2
5
6
7
# seq 10 | grep 5 -B 2
3
4
5
# seq 10 | grep 5 -C 2
3
4
5
6
7



===================================================================
set
修改shell环境的运行参数
-u			      当执行时使用到未定义过的变量，则显示错误信息。等价于-o nounset
-x        	  执行指令之前先显示指令及参数。等价于-o xtrace
-e            若指令传回值不等于0，则立即退出shell（不适用于管道命令）。等价于-o errexit
-o pipefail	  只要一个子命令失败，整个管道命令就失败，则立即退出shell
+<参数>   	  取消某个set设置的参数
https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html

set命令可以放在一起使用（建议放在所有Bash脚本的头部）
# 写法一
set -euxo pipefail
# 写法二
set -eux
set -o pipefail

也可以在执行Bash脚本的时候，从命令行传入set参数。
bash -euxo pipefail script.sh

用法示例：
set
显示所有的环境变量和Shell函数

set -x	#开启调试
......
set +x	#关闭调试


set +e 	#关闭-e选项
command1
command2
set -e	#重新打开-e选项
===================================================================













===================================================================
脚本调试
(1) bash -x script.sh
(2) set -x


脚本错误处理
如果脚本里面有运行失败的命令（返回值非0），Bash默认忽略这个错误（只是显示有错误，并没有终止执行），继续执行后面的命令。实际开发中，如果某个命令失败，往往需要脚本停止执行，防止错误累积。
(1) command || exit 1
只要command有非零返回值，脚本就会停止执行
# 写法一
command || { echo "command failed"; exit 1; }
# 写法二
if ! command; then echo "command failed"; exit 1; fi
# 写法三
command
if [ "$?" -ne 0 ]; then echo "command failed"; exit 1; fi

(2) command1 && command2
只有第一个命令成功了，才能继续执行第二个命令(命令有继承关系)

(3) set -e和set -o pipefail
脚本只要发生错误，就终止执行。
如果希望在命令失败的情况下，脚本继续执行下去。
写法一
command || true
命令即使执行失败，脚本也不会终止执行。
写法二
set +e
command1
command2
set -e
===================================================================




timeout [选项] 数字[后缀] 命令 [参数]...
用来控制程序运行的时间。运行指定的命令，如果在指定时间后仍在运行，则杀死该进程。
后缀”s”代表秒(默认值)，”m”代表分，”h”代表小时，”d”代表天
# timeout 3s sleep 1
# echo $?
0
# timeout 3s sleep 5
# echo $?
124

另一种方式
#!/bin/sh
timeout=10
(sleep $timeout && kill $$) &
while : ; do
    echo "aaa" 
    sleep 1
done




server_name=xxx
function usage(){
  cat <<-EOF
usage: $0 action
action:
	start           start the ${server_name}
	stop            stop the ${server_name}
	restart         restart ${server_name}
	status          return the status of ${server_name}, run or down
	monitor         return TRUE if the ${server_name} appears to be working.
EOF
  exit 0
}

if [ -f $filename ];then
    source $filename
fi

date '+%Y%m%d %T'





